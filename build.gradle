plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.seek'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    exclude '**/com/seek/AuthenticationServiceApplication/**/*IntegrationTest*'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['AuthenticationServiceApplication*']
            limit {
                minimum = 0.65
            }
            excludes = [
                    'com.seek.authentication_service.AuthenticationServiceApplication',
                    'com.seek.authentication_service.dto.**',
                    'com.seek.authentication_service.mapper.**',
                    'com.seek.authentication_service.model.**',
                    'com.seek.authentication_service.repository.**',
                    'com.seek.authentication_service.config.**',
                    'com.seek.authentication_service.exceptions.**',
                    'com.seek.authentication_service.controller.**',
                    'com.seek.authentication_service.filter.**',
            ]
        }
    }

}

jacocoTestReport {
    reports {
        html.destination file('build/jacocoHtml')
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/com/seek/authentication_service/AuthenticationServiceApplication*',
                    '**/com/seek/authentication_service/dto/**',
                    '**/com/seek/authentication_service/mapper/**',
                    '**/com/seek/authentication_service/model/**',
                    '**/com/seek/authentication_service/repository/**',
                    '**/com/seek/authentication_service/config/**',
                    '**/com/seek/authentication_service/exceptions/**',
                    '**/com/seek/authentication_service/controller/**',
                    '**/com/seek/authentication_service/filter/**',
            ])
        })
    }
}